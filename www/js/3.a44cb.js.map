{"version":3,"sources":["webpack:///../node_modules/lit-html/lib/default-template-processor.js","webpack:///../node_modules/lit-html/lit-html.js","webpack:///../node_modules/lit-html/lib/template.js","webpack:///../node_modules/lit-html/lib/parts.js","webpack:///../node_modules/lit-html/lib/part.js","webpack:///../node_modules/lit-html/lib/dom.js","webpack:///./views/footer/style.scss","webpack:///../node_modules/lit-html/lib/template-result.js","webpack:///../node_modules/lit-html/lib/template-factory.js","webpack:///../node_modules/lit-html/lib/directive.js","webpack:///../node_modules/lit-html/lib/render.js","webpack:///../node_modules/lit-html/lib/modify-template.js","webpack:///../node_modules/lit-html/lib/shady-render.js","webpack:///../node_modules/lit-element/lib/updating-element.js","webpack:///../node_modules/lit-element/lib/decorators.js","webpack:///../node_modules/lit-element/lib/css-tag.js","webpack:///../node_modules/lit-element/lit-element.js","webpack:///../node_modules/lit-html/lib/template-instance.js","webpack:///./views/app/style.scss","webpack:///../node_modules/classnames/index.js","webpack:///./views/header/style.scss","webpack:///../node_modules/@babel/runtime/regenerator/index.js","webpack:///./views/header/index.ts","webpack:///../node_modules/lit-html/directives/unsafe-html.js","webpack:///./views/footer/index.ts","webpack:///./web-components/port-details.ts","webpack:///./utils/p-min-delay.ts","webpack:///./directives/lazy.ts","webpack:///./views/details/index.ts","webpack:///./views/app/index.ts","webpack:///../node_modules/offline-plugin/runtime.js","webpack:///./svg/favicon.svg","webpack:///./svg/instagram.svg","webpack:///./svg/facebook.svg","webpack:///./svg/linkedin.svg","webpack:///./svg/github.svg","webpack:///./svg/envelope-solid.svg","webpack:///./index.ts","webpack:///../node_modules/regenerator-runtime/runtime.js"],"names":["defaultTemplateProcessor","[object Object]","element","name","strings","options","prefix","parts","slice","eventContext","__webpack_require__","d","__webpack_exports__","html","directive","render","template_result","window","push","values","marker","nodeMarker","boundAttributeSuffix","Template","isTemplatePartActive","createMarker","lastAttributeNameRegex","String","Math","random","markerRegex","RegExp","result","this","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","stringForPart","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","match","createTextNode","insertBefore","previousSibling","nextSibling","pop","n","removeChild","str","suffix","part","createComment","isPrimitive","AttributeCommitter","NodePart","BooleanAttributePart","PropertyCommitter","EventPart","_directive_js__WEBPACK_IMPORTED_MODULE_0__","_dom_js__WEBPACK_IMPORTED_MODULE_1__","_part_js__WEBPACK_IMPORTED_MODULE_2__","_template_instance_js__WEBPACK_IMPORTED_MODULE_3__","_template_result_js__WEBPACK_IMPORTED_MODULE_4__","_template_js__WEBPACK_IMPORTED_MODULE_5__","value","isIterable","Array","isArray","Symbol","iterator","dirty","_createPart","AttributePart","l","text","undefined","v","t","setAttribute","_getValue","committer","Object","commit","__pendingValue","container","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","template","templateFactory","update","instance","processor","fragment","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","setValue","Error","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","eventName","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","o","noChange","nothing","isCEPolyfill","reparentNodes","removeNodes","customElements","polyfillWrapFlushCallback","start","end","before","module","exports","footer","contactMe","icons","logo","icon","TemplateResult","SVGTemplateResult","_dom_js__WEBPACK_IMPORTED_MODULE_0__","_template_js__WEBPACK_IMPORTED_MODULE_1__","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","getTemplateElement","svgElement","firstChild","templateCaches","_template_js__WEBPACK_IMPORTED_MODULE_0__","templateCache","get","stringsArray","WeakMap","keyString","Map","set","key","join","isDirective","directives","f","args","has","_parts_js__WEBPACK_IMPORTED_MODULE_1__","_template_factory_js__WEBPACK_IMPORTED_MODULE_2__","assign","appendInto","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","lib_template","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","template_factory","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","querySelector","nativeShadow","cloneNode","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","defineProperty","oldValue","_requestUpdate","configurable","enumerable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","customElement","classOrDescriptor","clazz","define","legacyCustomElement","descriptor","kind","elements","standardCustomElement","standardProperty","placement","initializer","legacyProperty","proto","property","protoOrDescriptor","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","lit_element_LitElement","lit_html","flattenStyles","flat","Infinity","arrayFlat","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","delete","template_instance","dom","TemplateInstance","__parts","importNode","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","title","uppercase","subTitle","caption","section","about","sectionHeader","experience","education","sectionHeaderText","slide","innerSection","mainSection","baseTheme","__WEBPACK_AMD_DEFINE_RESULT__","hasOwn","classNames","classes","arguments","arg","argType","inner","apply","default","header","_templateObject","location","href","previousValues","unsafeHTML","previousValue","footer_templateObject","favicon","mail","github","linkedin","facebook","instagram","PortDetails","_LitElement","_initialize","_templateObject2","toggle","open","_get","_getPrototypeOf","hasAttribute","tabIndex","_handleKeyDown","_this","dispatchEvent","Event","bubbles","cancelable","requestAnimationFrame","scrollIntoView","behavior","ev","button","_this2","shadowRoot","getElementById","target","code","click","LitElement","delay","time","setTimeout","defaultOptions","delayRejection","pMinDelay","_ref","regenerator_default","a","mark","_callee","promise","minimumDelay","_defaultOptions$optio","promiseHasError","_ref2","_ref3","_args","wrap","_context","prev","next","abrupt","_objectSpread","catch","error","all","sent","_slicedToArray","stop","_x","partMap","disabled","fn","lazy_objectSpread","loading","then","id","details_templateObject","globals","cn","lazy","bind","__PRERENDER_INJECTED","pathname","details_templateObject2","app_templateObject","details","hasSW","navigator","protocol","hostname","install","serviceWorker","register","applyUpdate","callback","errback","getRegistration","registration","r","lit_html__WEBPACK_IMPORTED_MODULE_0__","_views_app_style_scss__WEBPACK_IMPORTED_MODULE_1__","_views_app_style_scss__WEBPACK_IMPORTED_MODULE_1___default","offline_plugin_runtime__WEBPACK_IMPORTED_MODULE_2__","_views_app__WEBPACK_IMPORTED_MODULE_3__","OfflinePluginRuntime","body","classList","app","runtime","Op","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","_sent","dispatchException","record","tryCatch","done","GenStateSuspendedYield","makeInvokeMethod","obj","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","invoke","__await","unwrapped","TypeError","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","skipTempReset","charAt","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"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","file":"js/3.a44cb.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this.__commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"_1ysb2\",\"name\":\"_3CjQP\",\"contactMe\":\"BIV_T\",\"icons\":\"_1TIM_\",\"logo\":\"_2RMk4\",\"icon\":\"_36CFI\"};","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? marker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = template.element.content;\n    insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.0');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"_3H-1X\",\"uppercase\":\"_2JVT8\",\"subTitle\":\"_1moez\",\"text\":\"G0NZV\",\"caption\":\"_2C9Yl\",\"section\":\"_2zya1\",\"about\":\"_2aRmI\",\"sectionHeader\":\"_-1jfj\",\"experience\":\"_1ZrFv\",\"education\":\"_2FZXl\",\"sectionHeaderText\":\"BCPLa\",\"slide\":\"_2fo6P\",\"innerSection\":\"_14ZIM\",\"event\":\"_34Mvx\",\"mainSection\":\"_18zjR\",\"baseTheme\":\"_35fk8\"};","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"_3NWuO\"};","module.exports = require(\"regenerator-runtime\");\n","import {html} from 'lit-html'\nimport style from './style.scss'\n\nexport default html`\n  <header id=\"header\" class=${style.header}>\n    <a href=${location.href}>\n      <h1>BSunderhus</h1>\n    </a>\n  </header>\n`\n\nexport {style}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive, NodePart } from '../lit-html.js';\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap();\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('unsafeHTML can only be used in text bindings');\n    }\n    const previousValue = previousValues.get(part);\n    if (previousValue !== undefined && isPrimitive(value) &&\n        value === previousValue.value && part.value === previousValue.fragment) {\n        return;\n    }\n    const template = document.createElement('template');\n    template.innerHTML = value; // innerHTML casts to string internally\n    const fragment = document.importNode(template.content, true);\n    part.setValue(fragment);\n    previousValues.set(part, { value, fragment });\n});\n//# sourceMappingURL=unsafe-html.js.map","import {html} from 'lit-html'\nimport {unsafeHTML} from 'lit-html/directives/unsafe-html'\n\nimport style from './style.scss'\n\nimport favicon from '~/svg/favicon.svg'\nimport instagram from '~/svg/instagram.svg'\nimport facebook from '~/svg/facebook.svg'\nimport linkedin from '~/svg/linkedin.svg'\nimport github from '~/svg/github.svg'\nimport mail from '~/svg/envelope-solid.svg'\n\nexport default html`\n  <footer id=\"footer\" class=${style.footer}>\n    <div class=${style.logo}>\n      ${unsafeHTML(favicon)}\n    </div>\n    <h3 class=${style.name}>\n      <i>Bernardo Sunderhus</i>\n    </h3>\n    <div class=${style.icons}>\n      <a class=${style.icon} aria-label=\"E-mail link\" target=\"__blank\" href=\"mailto:bernardo.sunderhus@gmail.com\">\n        ${unsafeHTML(mail)}\n      </a>\n      <a class=${style.icon} aria-label=\"Github link\" target=\"__blank\" href=\"https://github.com/bsunderhus\">\n        ${unsafeHTML(github)}\n      </a>\n      <a class=${style.icon} aria-label=\"Linkedin link\" target=\"__blank\" href=\"https://www.linkedin.com/in/bsunderhus\">\n        ${unsafeHTML(linkedin)}\n      </a>\n      <a class=${style.icon} aria-label=\"Facebook icon\" target=\"__blank\" href=\"https://www.facebook.com/bsunderhus\">\n        ${unsafeHTML(facebook)}\n      </a>\n      <a class=${style.icon} aria-label=\"Instagram icon\" target=\"__blank\" href=\"https://www.instagram.com/bsunderhus/\">\n        ${unsafeHTML(instagram)}\n      </a>\n    </div>\n  </footer>\n`\n\nexport {style}\n","import { css, html, customElement, LitElement, property } from 'lit-element';\n\n@customElement('port-details')\nexport default class PortDetails extends LitElement {\n  // public static readonly tabIndex = 0\n  public static readonly styles = css`\n    :host {\n      display: block;\n    }\n    :host([sticky][open]) button {\n      position: sticky;\n      top: 0;\n    }\n\n    :host(:not([open])) slot:not([name]) {\n      display: none\n    }\n\n    :host([hidden]) {\n      display: none;\n    }\n\n    slot {\n      display: block;\n    }\n\n\n    slot[name=\"summary\"] {\n      cursor: pointer;\n    }\n    slot[name=\"summary\"]:focus {\n      outline: none;\n    }\n\n\n    button {\n      width: 100%;\n      text-align: unset;\n      -webkit-box-sizing: content-box;\n      -moz-box-sizing: content-box;\n      box-sizing: content-box;\n      background: none;\n      border: 0;\n      color: inherit;\n      font: inherit;\n      line-height: normal;\n      overflow: visible;\n      padding: 0;\n      -webkit-appearance: button;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n        -ms-user-select: none;\n    }\n    button::-moz-focus-inner {\n      border: 0;\n      padding: 0;\n    }\n  `\n  \n  @property({type: Boolean, reflect: true})\n  public open: boolean = false\n  @property({type: Boolean, reflect: true})\n  public sticky: boolean = false\n\n  public render () {\n    return html`\n      <button\n        id=\"button\"\n        tabindex=${-1}\n        aria-controls=\"content\"\n        @click=${this.toggle}\n        aria-expanded=${this.open ? 'true' : 'false'}\n      >\n        <slot name=\"summary\"></slot>\n      </button>\n      <slot id=\"content\"></slot>\n    `\n  }\n  public connectedCallback () {\n    super.connectedCallback()\n    if (!this.hasAttribute('tabindex')) this.tabIndex = 0\n    this.addEventListener('keydown', this._handleKeyDown, {passive: true})\n  }\n  public disconnectedCallback () {\n    super.disconnectedCallback()\n    this.removeEventListener('keydown', this._handleKeyDown)\n  }\n  public toggle () {\n    this.open = !this.open\n    this.dispatchEvent(new Event('toggle', {bubbles: false, cancelable: false}))\n    if (this.open) {\n      requestAnimationFrame(() => (\n        this.scrollIntoView({behavior: 'smooth'})\n      ))\n    }\n  }\n  private _handleKeyDown = (ev: KeyboardEvent) => {\n    const button = this.shadowRoot!.getElementById('button') as HTMLButtonElement\n    if (ev.target === this && button && (ev.code === 'Space' || ev.code === 'Enter')) {\n      button.click()\n    }\n  }\n}\n","\nconst delay = (time: number) => new Promise<void>(resolve => {\n  if (time <= 0) return resolve()\n  setTimeout(() => resolve(), time)\n})\n\nexport interface PMinDelayOptions {\n  delayRejection?: boolean\n}\n\nconst defaultOptions: PMinDelayOptions = {delayRejection: true}\n\nconst pMinDelay = async <V>(promise: Promise<V>, minimumDelay = 0, options = defaultOptions) => {\n  if (minimumDelay <= 0) return promise\n  const {delayRejection} = {...defaultOptions, ...options}\n  let promiseHasError = false\n\tif (delayRejection) {\n\t\tpromise = promise.catch(error => {\n      promiseHasError = true\n      return error\n\t\t})\n\t}\n  const [value] = await Promise.all([promise, delay(minimumDelay)])\n\treturn promiseHasError ? Promise.reject(value) : value\n}\n\nexport default pMinDelay\n","import {directive, NodePart} from 'lit-html'\nimport pMinDelay from '~/utils/p-min-delay'\n\ndeclare global {\n  interface Window {\n    __PRERENDER_INJECTED?: boolean\n  }\n}\n\nexport type ImportFn = () => Promise<{default: unknown}>\nexport interface LazyOptions {\n  delay?: number\n  error?: unknown\n  loading?: unknown\n  disabled?: boolean\n  delayRejection?: boolean\n}\n\nconst partMap = new WeakMap<NodePart, unknown>()\n\nconst defaultOptions: LazyOptions = {\n  delay: 0,\n  disabled: false,\n  delayRejection: false\n}\n\nexport default directive((fn: ImportFn, options: LazyOptions = defaultOptions) => (part: NodePart) => {\n  if (!(part instanceof NodePart)) throw new Error('lazy directive can only be used in content bindings');\n  const {disabled, loading, error, delay, delayRejection} = {...defaultOptions, ...options}\n  if (disabled) return\n  if (partMap.has(part)) {\n    const template = partMap.get(part)!\n    if (part.value !== template) part.setValue(template)\n    return\n  } else if (loading) part.setValue(options.loading)\n\n  pMinDelay(fn(), delay, {delayRejection})\n  .then(({default: template}) => template)\n  .catch(() => error)\n  .then(value => {\n    partMap.set(part, value)\n    part.setValue(value)\n    part.commit()\n  })\n})\n","import '~/web-components/port-details'\n\nimport {html} from 'lit-html'\nimport {style as globals} from '~/views/app'\nimport lazy from '~/directives/lazy'\nimport cn from 'classnames'\n\n\n\n\nconst section = (id: string, title: string, content?: any, open = false) =>  html`\n  <port-details class=${globals.section} id=${id} ?open=${open} sticky>\n    <header class=${cn(globals.sectionHeader)} slot=\"summary\">\n      <h2 class=${cn(globals.uppercase, globals.sectionHeaderText)}>\n        ${title}\n      </h2>\n    </header>\n    <article class=${cn(globals.innerSection)}>\n      ${content}\n    </article>\n  </port-details>\n`\n\n\n\nconst about = lazy(() => import(\n  /* webpackChunkName: \"about\" */\n  /* webpackPreload: true */\n  '~/views/details/about'\n), {disabled: window.__PRERENDER_INJECTED && location.pathname !== '/'})\n\nconst experience = lazy(() => import(\n  /* webpackChunkName: \"experience\" */\n  /* webpackPreload: true */\n  '~/views/details/experience'\n), {disabled: window.__PRERENDER_INJECTED && location.pathname !== '/experience'})\n\nconst education = lazy(() => import(\n  /* webpackChunkName: \"education\" */\n  /* webpackPreload: true */\n  '~/views/details/education'\n), {disabled: window.__PRERENDER_INJECTED && location.pathname !== '/education'})\n\n\nexport default html`\n  ${section(globals.about, 'About Me', about, location.pathname === '/')}\n  ${section(globals.experience, 'Experience', experience, location.pathname === '/experience')}\n  ${section(globals.education, 'Education', education, location.pathname === '/education')}\n`\n","import {html} from 'lit-html'\nimport style from './style.scss'\nimport variables from './style.json'\n\nimport header from '~/views/header'\nimport footer from '~/views/footer'\nimport details from '~/views/details'\n\nexport default html`\n  ${header}\n  <main class=${style.mainSection}>\n    ${details}\n  </main>\n  ${footer}\n`\n\nexport {style, variables}\n","var appCacheIframe;\n\nfunction hasSW() {\n  \n    return 'serviceWorker' in navigator && (\n      window.location.protocol === 'https:' ||\n      window.location.hostname === 'localhost' ||\n      window.location.hostname.indexOf('127.') === 0\n    );\n  \n}\n\nfunction install(options) {\n  options || (options = {});\n\n  \n    if (hasSW()) {\n      var registration = navigator.serviceWorker\n        .register(\n          \"/sw.js\", {\n            \n            \n          }\n        );\n\n      \n\n      return;\n    }\n  \n\n  \n}\n\nfunction applyUpdate(callback, errback) {\n  \n\n  \n}\n\nfunction update() {\n  \n    if (hasSW()) {\n      navigator.serviceWorker.getRegistration().then(function(registration) {\n        if (!registration) return;\n        return registration.update();\n      });\n    }\n  \n\n  \n}\n\n\n\nexports.install = install;\nexports.applyUpdate = applyUpdate;\nexports.update = update;\n","module.exports = \"<svg viewBox=\\\"0 0 100 100\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"100\\\" height=\\\"100\\\" id=\\\"background\\\" stroke-width=\\\"5\\\" stroke=\\\"currentColor\\\" fill=\\\"none\\\"></rect><text x=\\\"95\\\" y=\\\"90\\\" id=\\\"text\\\" font-size=\\\"50\\\" text-anchor=\\\"end\\\" font-weight=\\\"bold\\\" fill=\\\"currentColor\\\" font-family=\\\"NeutraText-Bold, Neutra Text\\\">BS</text></svg>\"","module.exports = \"<svg id=\\\"instagram\\\" aria-hidden=\\\"true\\\" role=\\\"img\\\" viewBox=\\\"0 0 448 512\\\"><path fill=\\\"currentColor\\\" d=\\\"M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z\\\"></path></svg>\"","module.exports = \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 448 512\\\"><path fill=\\\"currentColor\\\" d=\\\"M400 32H48A48 48 0 0 0 0 80v352a48 48 0 0 0 48 48h137.25V327.69h-63V256h63v-54.64c0-62.15 37-96.48 93.67-96.48 27.14 0 55.52 4.84 55.52 4.84v61h-31.27c-30.81 0-40.42 19.12-40.42 38.73V256h68.78l-11 71.69h-57.78V480H400a48 48 0 0 0 48-48V80a48 48 0 0 0-48-48z\\\"></path></svg>\"","module.exports = \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 448 512\\\"><path fill=\\\"currentColor\\\" d=\\\"M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z\\\"></path></svg>\"","module.exports = \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 496 512\\\"><path fill=\\\"currentColor\\\" d=\\\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\\\"></path></svg>\"","module.exports = \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" data-prefix=\\\"fas\\\" data-icon=\\\"envelope\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 512 512\\\"><path fill=\\\"currentColor\\\" d=\\\"M502.3 190.8c3.9-3.1 9.7-.2 9.7 4.7V400c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V195.6c0-5 5.7-7.8 9.7-4.7 22.4 17.4 52.1 39.5 154.1 113.6 21.1 15.4 56.7 47.8 92.2 47.6 35.7.3 72-32.8 92.3-47.6 102-74.1 131.6-96.3 154-113.7zM256 320c23.2.4 56.6-29.2 73.4-41.4 132.7-96.3 142.8-104.7 173.4-128.7 5.8-4.5 9.2-11.5 9.2-18.9v-19c0-26.5-21.5-48-48-48H48C21.5 64 0 85.5 0 112v19c0 7.4 3.4 14.3 9.2 18.9 30.6 23.9 40.7 32.4 173.4 128.7 16.8 12.2 50.2 41.8 73.4 41.4z\\\"></path></svg>\"","import {render} from 'lit-html'\nimport style from '~/views/app/style.scss'\nimport * as OfflinePluginRuntime from 'offline-plugin/runtime'\nimport app from '~/views/app'\n\nOfflinePluginRuntime.install()\n\ndocument.body.classList.add(style.baseTheme)\nrender(app, document.body)\n\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n"],"sourceRoot":""}