{"version":3,"sources":["webpack:///../node_modules/lit-html/lib/default-template-processor.js","webpack:///../node_modules/lit-html/lit-html.js","webpack:///../node_modules/lit-html/lib/template.js","webpack:///../node_modules/classnames/index.js","webpack:///../node_modules/lit-html/lib/parts.js","webpack:///../node_modules/lit-html/lib/part.js","webpack:///../node_modules/lit-html/lib/dom.js","webpack:///../node_modules/lit-html/lib/template-result.js","webpack:///../node_modules/lit-html/lib/template-factory.js","webpack:///../node_modules/lit-html/lib/directive.js","webpack:///../node_modules/lit-html/lib/render.js","webpack:///../node_modules/lit-html/lib/template-instance.js"],"names":["defaultTemplateProcessor","[object Object]","element","name","strings","options","prefix","parts","slice","eventContext","__webpack_require__","d","__webpack_exports__","html","directive","render","template_result","window","push","values","marker","nodeMarker","boundAttributeSuffix","Template","isTemplatePartActive","createMarker","lastAttributeNameRegex","String","Math","random","markerRegex","RegExp","result","this","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","stringForPart","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","match","createTextNode","insertBefore","previousSibling","nextSibling","pop","n","removeChild","str","suffix","part","createComment","__WEBPACK_AMD_DEFINE_RESULT__","hasOwn","hasOwnProperty","classNames","classes","arguments","arg","argType","Array","isArray","inner","apply","key","call","join","module","exports","default","undefined","isPrimitive","AttributeCommitter","NodePart","BooleanAttributePart","PropertyCommitter","EventPart","_directive_js__WEBPACK_IMPORTED_MODULE_0__","_dom_js__WEBPACK_IMPORTED_MODULE_1__","_part_js__WEBPACK_IMPORTED_MODULE_2__","_template_instance_js__WEBPACK_IMPORTED_MODULE_3__","_template_result_js__WEBPACK_IMPORTED_MODULE_4__","_template_js__WEBPACK_IMPORTED_MODULE_5__","value","isIterable","Symbol","iterator","dirty","_createPart","AttributePart","l","text","v","t","setAttribute","_getValue","committer","Object","commit","__pendingValue","container","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","template","templateFactory","update","instance","processor","fragment","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","setValue","Error","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","eventName","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","o","noChange","nothing","isCEPolyfill","reparentNodes","removeNodes","customElements","polyfillWrapFlushCallback","start","end","before","TemplateResult","SVGTemplateResult","_dom_js__WEBPACK_IMPORTED_MODULE_0__","_template_js__WEBPACK_IMPORTED_MODULE_1__","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","getTemplateElement","svgElement","firstChild","templateCaches","_template_js__WEBPACK_IMPORTED_MODULE_0__","templateCache","get","stringsArray","WeakMap","keyString","Map","set","isDirective","directives","f","args","has","_parts_js__WEBPACK_IMPORTED_MODULE_1__","_template_factory_js__WEBPACK_IMPORTED_MODULE_2__","assign","appendInto","TemplateInstance","__parts","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade"],"mappings":"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","file":"js/0.0ea64.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this.__commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? marker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map"],"sourceRoot":""}