{"version":3,"sources":["webpack:///../node_modules/lit-html/lib/modify-template.js","webpack:///../node_modules/lit-html/lib/shady-render.js","webpack:///../node_modules/lit-element/lib/updating-element.js","webpack:///../node_modules/lit-element/lib/decorators.js","webpack:///../node_modules/lit-element/lib/css-tag.js","webpack:///../node_modules/lit-element/lit-element.js","webpack:///./web-components/highlight-text/index.tsx","webpack:///./web-components/port-details/index.tsx","webpack:///./web-components/port-event/index.tsx","webpack:///./web-components/port-list/index.tsx"],"names":["walkerNodeFilter","removeNodesFromTemplate","template","nodesToRemove","element","content","parts","walker","document","createTreeWalker","partIndex","nextActiveIndexInTemplateParts","part","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","nextNode","node","currentNode","previousSibling","has","push","undefined","index","forEach","n","parentNode","removeChild","countNodes","count","nodeType","startIndex","i","length","Object","lib_template","getTemplateCacheKey","type","scopeName","compatibleShadyCSSVersion","window","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","result","cacheKey","templateCache","template_factory","get","stringsArray","WeakMap","keyString","Map","set","strings","key","join","getTemplateElement","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","createElement","style","textContent","templates","Array","from","s","removeStylesFromLitTemplates","refNode","appendChild","insertCount","walkerIndex","insertBefore","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","cloneNode","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","[object Object]","value","Boolean","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","super","this","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","attributes","_classProperties","v","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","name","options","_ensureClassProperties","noAccessor","prototype","Symbol","defineProperty","oldValue","_requestUpdate","configurable","enumerable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","toLowerCase","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","removeAttribute","setAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","e","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","update","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","customElement","tagName","classOrDescriptor","clazz","customElements","define","legacyCustomElement","descriptor","kind","elements","standardCustomElement","standardProperty","placement","initializer","call","assign","legacyProperty","proto","property","protoOrDescriptor","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","Error","styleSheet","_styleSheet","replaceSync","css","values","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","isArray","lit_element_LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","lit_html","eventContext","container","hasRendered","lib_render","needsScoping","host","template_result","firstScopeRender","renderContainer","createDocumentFragment","templateFactory","delete","template_instance","dom","_LitElement","arguments","_initialize","html","_templateObject2","text","split","char","_templateObject3","cn","test","LitElement","PortDetails","port_details_templateObject2","toggle","open","_get","_getPrototypeOf","hasAttribute","tabIndex","addEventListener","_handleKeyDown","passive","removeEventListener","_this","dispatchEvent","Event","bubbles","cancelable","requestAnimationFrame","scrollIntoView","behavior","ev","button","_this2","shadowRoot","getElementById","target","code","click","port_event_templateObject","port_list_decorate","PortList","F","d","static","port_list_templateObject","port_list_get","port_list_getPrototypeOf","port_list_templateObject2","_initialize2","_LitElement2","PortListItem","port_list_templateObject3","_templateObject4"],"mappings":"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","file":"js/5.d8a31.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = template.element.content;\n    insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.0');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import {html, LitElement, css, customElement, property} from 'lit-element'\nimport cn from 'classnames'\n\nexport interface HighLightTextAttrs {\n  text?: string\n}\n\n@customElement('highlight-text')\nexport default class HighLightText2 extends LitElement {\n  public static readonly styles = css`\n    :host {\n      display: inline;\n    }\n    :host([hidden]) {\n      display: none;\n    }\n    .highlight {\n      color: var(--highlight-text-color);\n    }\n  `\n  @property({type: String})\n  public text: string = ''\n  public render () {\n    return html`\n      ${this.text.split('').map(char => html`\n        <span class=${cn(/^\\W+$/.test(char) && 'highlight')}>\n          ${char}\n        </span>\n      `)}\n    `\n  }\n}\n","import { css, html, customElement, LitElement, property } from 'lit-element';\n\n@customElement('port-details')\nexport default class PortDetails extends LitElement {\n  // public static readonly tabIndex = 0\n  public static readonly styles = css`\n    :host {\n      display: block;\n    }\n    :host([sticky][open]) button {\n      position: sticky;\n      top: 0;\n    }\n\n    :host(:not([open])) slot:not([name]) {\n      display: none\n    }\n\n    :host([hidden]) {\n      display: none;\n    }\n\n    slot {\n      display: block;\n    }\n\n\n    slot[name=\"summary\"] {\n      cursor: pointer;\n    }\n    slot[name=\"summary\"]:focus {\n      outline: none;\n    }\n\n\n    button {\n      width: 100%;\n      text-align: unset;\n      -webkit-box-sizing: content-box;\n      -moz-box-sizing: content-box;\n      box-sizing: content-box;\n      background: none;\n      border: 0;\n      color: inherit;\n      font: inherit;\n      line-height: normal;\n      overflow: visible;\n      padding: 0;\n      -webkit-appearance: button;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n        -ms-user-select: none;\n    }\n    button::-moz-focus-inner {\n      border: 0;\n      padding: 0;\n    }\n  `\n  \n  @property({type: Boolean, reflect: true})\n  public open: boolean = false\n  @property({type: Boolean, reflect: true})\n  public sticky: boolean = false\n\n  public render () {\n    return html`\n      <button\n        id=\"button\"\n        tabindex=${-1}\n        aria-controls=\"content\"\n        @click=${this.toggle}\n        aria-expanded=${this.open ? 'true' : 'false'}\n      >\n        <slot name=\"summary\"></slot>\n      </button>\n      <slot id=\"content\"></slot>\n    `\n  }\n  public connectedCallback () {\n    super.connectedCallback()\n    if (!this.hasAttribute('tabindex')) this.tabIndex = 0\n    this.addEventListener('keydown', this._handleKeyDown, {passive: true})\n  }\n  public disconnectedCallback () {\n    super.disconnectedCallback()\n    this.removeEventListener('keydown', this._handleKeyDown)\n  }\n  public toggle () {\n    this.open = !this.open\n    this.dispatchEvent(new Event('toggle', {bubbles: false, cancelable: false}))\n    if (this.open) {\n      requestAnimationFrame(() => (\n        this.scrollIntoView({behavior: 'smooth'})\n      ))\n    }\n  }\n  private _handleKeyDown = (ev: KeyboardEvent) => {\n    const button = this.shadowRoot!.getElementById('button') as HTMLButtonElement\n    if (ev.target === this && button && (ev.code === 'Space' || ev.code === 'Enter')) {\n      button.click()\n    }\n  }\n}\n","import {html, css, customElement, LitElement} from 'lit-element'\n\n@customElement('port-event')\nexport default class PortEvent extends LitElement {\n  protected render () {\n    return html`\n      <slot name=\"title\" class=\"title\"></slot>\n      <slot name=\"location\" class=\"location\"></slot>\n      <slot class=\"content\"></slot>\n      <slot name=\"timestamp\" class=\"timestamp\"></slot>\n    `\n  }\n  public static readonly styles = css`\n    :host {\n      display: grid;\n      grid-template-columns: 1fr auto;\n      grid-template-areas:\n        \"title   location\"\n        \"content content\"\n        \".....   timestamp\";\n      grid-gap: var(--space);\n    }\n    :host([hidden]) {\n      display: none;\n    }\n    :host(:focus) {\n      outline: none;\n    }\n    slot {\n      display: block;\n    }\n    .title {\n      grid-area: title;\n    }\n    .location {\n      justify-self: end;\n      grid-area: location;\n    }\n    .timestamp {\n      grid-area: timestamp;\n      justify-self: end;\n    }\n    .content {\n      align-self: baseline;\n      grid-area: content;\n    }\n  `\n}\n","import {html, css, customElement, LitElement} from 'lit-element'\n\n@customElement('port-list')\nexport class PortList extends LitElement {\n  public static readonly styles = css`\n    :host {\n      display: block;\n      &:focus {\n        outline: none;\n      }\n    }\n    :host([hidden]) {\n      display: none;\n    }\n    :host(:focus) {\n      outline: none;\n    }  \n  `\n  public static readonly role = 'list'\n  public connectedCallback () {\n    super.connectedCallback()\n    if (!this.hasAttribute('role')) this.setAttribute('role', 'list')\n  }\n  public render () {\n    return html`<slot></slot>`\n  }\n}\n\n@customElement('port-list-item')\nexport class PortListItem extends LitElement {\n  public static readonly styles = css`\n    :host {\n      display: flex;\n      align-items: center;\n      padding: var(--space);\n    }\n    :host([hidden]) {\n      display: none;\n    }\n    :host(:focus) {\n      outline: none;\n    }\n    .bullet {\n      flex: 0 0 auto;\n      box-sizing: border-box;\n      height: 6px;\n      width: 6px;\n      background-color: var(--port-list-item-bullet-color);\n      border-radius: 100%;\n      display: inline-block;\n      margin-right: var(--space);\n    }  \n  `\n  public static readonly role = 'listitem'\n  public connectedCallback () {\n    super.connectedCallback()\n    if (!this.hasAttribute('role')) this.setAttribute('role', 'listitem')\n  }\n  protected render () {\n    return html`\n      <span class=\"bullet\"></span>\n      <span>\n        <slot></slot>\n      </span>\n    `\n  }\n}\n"],"sourceRoot":""}