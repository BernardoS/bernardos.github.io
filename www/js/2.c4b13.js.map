{"version":3,"sources":["/Users/sunderhus/Projects/sunderhus.github.io/src/web-components/port-details/index.tsx","/Users/sunderhus/Projects/sunderhus.github.io/src/web-components/port-event/index.tsx","/Users/sunderhus/Projects/sunderhus.github.io/src/web-components/highlight-text/index.tsx","/Users/sunderhus/Projects/sunderhus.github.io/src/web-components/port-list/index.tsx"],"names":["customElement","PortDetails","_LitElement","[object Object]","super","arguments","_initialize","this","css","property","type","Boolean","reflect","html","_templateObject2","toggle","open","_get","_getPrototypeOf","prototype","call","hasAttribute","tabIndex","addEventListener","_handleKeyDown","passive","removeEventListener","_this","dispatchEvent","Event","bubbles","cancelable","requestAnimationFrame","scrollIntoView","behavior","ev","button","_this2","shadowRoot","getElementById","target","code","click","LitElement","_templateObject","String","text","split","map","char","_templateObject3","cn","test","_decorate","PortList","F","d","kind","static","key","value","setAttribute","_initialize2","_LitElement2","PortListItem","_templateObject4"],"mappings":"+jSAECA,YAAc,+BAAf,MACqBC,UADrBC,EACoDC,cAAAC,SAAAC,WAAAC,EAAAC,gBAA/BN,kEAEaO,6CAsD/BC,YAAS,CAACC,KAAMC,QAASC,SAAS,wCACZ,8BACtBH,YAAS,CAACC,KAAMC,QAASC,SAAS,0CACV,sCAEzB,WACE,OAAOC,YAAPC,KAGgB,EAEHP,KAAKQ,OACER,KAAKS,KAAO,OAAS,wDAO3C,WACEC,EAAAC,EA5EiBjB,EA4EjBkB,WAAA,oBAAAZ,MAAAa,KAAAb,MACKA,KAAKc,aAAa,cAAad,KAAKe,SAAW,GACpDf,KAAKgB,iBAAiB,UAAWhB,KAAKiB,eAAgB,CAACC,SAAS,sDAElE,WACER,EAAAC,EAjFiBjB,EAiFjBkB,WAAA,uBAAAZ,MAAAa,KAAAb,MACAA,KAAKmB,oBAAoB,UAAWnB,KAAKiB,oDAE3C,WAAiB,IAAAG,EAAApB,KACfA,KAAKS,MAAQT,KAAKS,KAClBT,KAAKqB,cAAc,IAAIC,MAAM,SAAU,CAACC,SAAS,EAAOC,YAAY,KAChExB,KAAKS,MACPgB,sBAAsB,kBACpBL,EAAKM,eAAe,CAACC,SAAU,qFAIZ,SAACC,GACxB,IAAMC,EAASC,EAAKC,WAAYC,eAAe,UAC3CJ,EAAGK,SAAWH,IAAQD,GAAuB,UAAZD,EAAGM,MAAgC,UAAZN,EAAGM,MAC7DL,EAAOM,cAhG4BC,4yQCDxC3C,YAAc,sCAAf,cAAAE,EACkDC,cAAAC,SAAAC,WAAAC,EAAAC,6CAChD,WACE,OAAOM,YAAP+B,oEAO8BpC,sBATKmC,0wPCItC3C,YAAc,0CAAf,cAAAE,EACuDC,cAAAC,SAAAC,WAAAC,EAAAC,wEACrBC,6CAW/BC,YAAS,CAACC,KAAMmC,4CACK,uCACtB,WACE,OAAOhC,YAAPC,IACIP,KAAKuC,KAAKC,MAAM,IAAIC,IAAI,SAAAC,GAAI,OAAIpC,YAAJqC,IACdC,IAAG,QAAQC,KAAKH,IAAS,aACnCA,WAlBgCN,+wRCL5CU,EAAA,CADCrD,YAAc,cACf,SAAAM,EAAAJ,GADA,MACaoD,UADbpD,EACyCC,cAAAC,SAAAC,WAAAC,EAAAC,OAAzC,OAAAgD,EAAaD,EAAbE,EAAA,EAAAC,KAAA,QAAAC,QAAA,EAAAC,IAAA,SAAAC,MAAA,kBACkCpD,YADlCoC,OAAA,CAAAa,KAAA,QAAAC,QAAA,EAAAC,IAAA,OAAAC,MAAA,iBAegC,SAfhC,CAAAH,KAAA,SAAAE,IAAA,oBAAAC,MAgBE,WACE3C,EAAAC,EAjBSoC,EAiBTnC,WAAA,oBAAAZ,MAAAa,KAAAb,MACKA,KAAKc,aAAa,SAASd,KAAKsD,aAAa,OAAQ,UAlB9D,CAAAJ,KAAA,SAAAE,IAAA,SAAAC,MAoBE,WACE,OAAO/C,YAAPC,UArB0B6B,KA0B9BU,EAAA,CADCrD,YAAc,mBACf,SAAA8D,EAAAC,GADA,MACaC,UADbD,EAC6C5D,cAAAC,SAAAC,WAAAyD,EAAAvD,OAA7C,OAAAgD,EAAaS,EAAbR,EAAA,EAAAC,KAAA,QAAAC,QAAA,EAAAC,IAAA,SAAAC,MAAA,kBACkCpD,YADlC0C,OAAA,CAAAO,KAAA,QAAAC,QAAA,EAAAC,IAAA,OAAAC,MAAA,iBAwBgC,aAxBhC,CAAAH,KAAA,SAAAE,IAAA,oBAAAC,MAyBE,WACE3C,EAAAC,EA1BS8C,EA0BT7C,WAAA,oBAAAZ,MAAAa,KAAAb,MACKA,KAAKc,aAAa,SAASd,KAAKsD,aAAa,OAAQ,cA3B9D,CAAAJ,KAAA,SAAAE,IAAA,SAAAC,MA6BE,WACE,OAAO/C,YAAPoD,UA9B8BtB","file":"js/2.c4b13.js","sourcesContent":["import { css, html, customElement, LitElement, property } from 'lit-element';\n\n@customElement('port-details')\nexport default class PortDetails extends LitElement {\n  // public static readonly tabIndex = 0\n  public static readonly styles = css`\n    :host {\n      display: block;\n    }\n    :host([sticky][open]) button {\n      position: sticky;\n      top: 0;\n    }\n\n    :host(:not([open])) slot:not([name]) {\n      display: none\n    }\n\n    :host([hidden]) {\n      display: none;\n    }\n\n    slot {\n      display: block;\n    }\n\n\n    slot[name=\"summary\"] {\n      cursor: pointer;\n    }\n    slot[name=\"summary\"]:focus {\n      outline: none;\n    }\n\n\n    button {\n      width: 100%;\n      text-align: unset;\n      -webkit-box-sizing: content-box;\n      -moz-box-sizing: content-box;\n      box-sizing: content-box;\n      background: none;\n      border: 0;\n      color: inherit;\n      font: inherit;\n      line-height: normal;\n      overflow: visible;\n      padding: 0;\n      -webkit-appearance: button;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n        -ms-user-select: none;\n    }\n    button::-moz-focus-inner {\n      border: 0;\n      padding: 0;\n    }\n  `\n  \n  @property({type: Boolean, reflect: true})\n  public open: boolean = false\n  @property({type: Boolean, reflect: true})\n  public sticky: boolean = false\n\n  public render () {\n    return html`\n      <button\n        id=\"button\"\n        tabindex=${-1}\n        aria-controls=\"content\"\n        @click=${this.toggle}\n        aria-expanded=${this.open ? 'true' : 'false'}\n      >\n        <slot name=\"summary\"></slot>\n      </button>\n      <slot id=\"content\"></slot>\n    `\n  }\n  public connectedCallback () {\n    super.connectedCallback()\n    if (!this.hasAttribute('tabindex')) this.tabIndex = 0\n    this.addEventListener('keydown', this._handleKeyDown, {passive: true})\n  }\n  public disconnectedCallback () {\n    super.disconnectedCallback()\n    this.removeEventListener('keydown', this._handleKeyDown)\n  }\n  public toggle () {\n    this.open = !this.open\n    this.dispatchEvent(new Event('toggle', {bubbles: false, cancelable: false}))\n    if (this.open) {\n      requestAnimationFrame(() => (\n        this.scrollIntoView({behavior: 'smooth'})\n      ))\n    }\n  }\n  private _handleKeyDown = (ev: KeyboardEvent) => {\n    const button = this.shadowRoot!.getElementById('button') as HTMLButtonElement\n    if (ev.target === this && button && (ev.code === 'Space' || ev.code === 'Enter')) {\n      button.click()\n    }\n  }\n}\n","import {html, css, customElement, LitElement} from 'lit-element'\n\n@customElement('port-event')\nexport default class PortEvent extends LitElement {\n  protected render () {\n    return html`\n      <slot name=\"title\" class=\"title\"></slot>\n      <slot name=\"location\" class=\"location\"></slot>\n      <slot class=\"content\"></slot>\n      <slot name=\"timestamp\" class=\"timestamp\"></slot>\n    `\n  }\n  public static readonly styles = css`\n    :host {\n      display: grid;\n      grid-template-columns: 1fr auto;\n      grid-template-areas:\n        \"title   location\"\n        \"content content\"\n        \".....   timestamp\";\n      grid-gap: var(--space);\n    }\n    :host([hidden]) {\n      display: none;\n    }\n    :host(:focus) {\n      outline: none;\n    }\n    slot {\n      display: block;\n    }\n    .title {\n      grid-area: title;\n    }\n    .location {\n      justify-self: end;\n      grid-area: location;\n    }\n    .timestamp {\n      grid-area: timestamp;\n      justify-self: end;\n    }\n    .content {\n      align-self: baseline;\n      grid-area: content;\n    }\n  `\n}\n","import {html, LitElement, css, customElement, property} from 'lit-element'\nimport cn from 'classnames'\n\nexport interface HighLightTextAttrs {\n  text?: string\n}\n\n@customElement('highlight-text')\nexport default class HighLightText2 extends LitElement {\n  public static readonly styles = css`\n    :host {\n      display: inline;\n    }\n    :host([hidden]) {\n      display: none;\n    }\n    .highlight {\n      color: var(--highlight-text-color);\n    }\n  `\n  @property({type: String})\n  public text: string = ''\n  public render () {\n    return html`\n      ${this.text.split('').map(char => html`\n        <span class=${cn(/^\\W+$/.test(char) && 'highlight')}>\n          ${char}\n        </span>\n      `)}\n    `\n  }\n}\n","import {html, css, customElement, LitElement} from 'lit-element'\n\n@customElement('port-list')\nexport class PortList extends LitElement {\n  public static readonly styles = css`\n    :host {\n      display: block;\n      &:focus {\n        outline: none;\n      }\n    }\n    :host([hidden]) {\n      display: none;\n    }\n    :host(:focus) {\n      outline: none;\n    }  \n  `\n  public static readonly role = 'list'\n  public connectedCallback () {\n    super.connectedCallback()\n    if (!this.hasAttribute('role')) this.setAttribute('role', 'list')\n  }\n  public render () {\n    return html`<slot></slot>`\n  }\n}\n\n@customElement('port-list-item')\nexport class PortListItem extends LitElement {\n  public static readonly styles = css`\n    :host {\n      display: flex;\n      align-items: center;\n      padding: var(--space);\n    }\n    :host([hidden]) {\n      display: none;\n    }\n    :host(:focus) {\n      outline: none;\n    }\n    .bullet {\n      flex: 0 0 auto;\n      box-sizing: border-box;\n      height: 6px;\n      width: 6px;\n      background-color: var(--port-list-item-bullet-color);\n      border-radius: 100%;\n      display: inline-block;\n      margin-right: var(--space);\n    }  \n  `\n  public static readonly role = 'listitem'\n  public connectedCallback () {\n    super.connectedCallback()\n    if (!this.hasAttribute('role')) this.setAttribute('role', 'listitem')\n  }\n  protected render () {\n    return html`\n      <span class=\"bullet\"></span>\n      <span>\n        <slot></slot>\n      </span>\n    `\n  }\n}\n"],"sourceRoot":""}