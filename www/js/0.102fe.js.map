{"version":3,"sources":["/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lib/default-template-processor.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lit-html.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lib/modify-template.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lib/shady-render.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-element/lib/updating-element.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-element/lib/decorators.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-element/lib/css-tag.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-element/lit-element.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lib/template.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/classnames/index.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lib/parts.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lib/part.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lib/dom.js","/Users/sunderhus/Projects/sunderhus.github.io/src/views/footer/style.scss","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lib/template-result.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lib/template-factory.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lib/directive.js","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lib/render.js","/Users/sunderhus/Projects/sunderhus.github.io/src/views/details/experience/style.scss","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/lib/template-instance.js","/Users/sunderhus/Projects/sunderhus.github.io/src/views/app/style.scss","/Users/sunderhus/Projects/sunderhus.github.io/src/views/header/style.scss","/Users/sunderhus/Projects/sunderhus.github.io/src/images/STRV.png","/Users/sunderhus/Projects/sunderhus.github.io/src/svg/favicon.svg","/Users/sunderhus/Projects/sunderhus.github.io/src/svg/instagram.svg","/Users/sunderhus/Projects/sunderhus.github.io/src/svg/facebook.svg","/Users/sunderhus/Projects/sunderhus.github.io/src/svg/linkedin.svg","/Users/sunderhus/Projects/sunderhus.github.io/src/svg/github.svg","/Users/sunderhus/Projects/sunderhus.github.io/src/svg/envelope-solid.svg","/Users/sunderhus/Projects/sunderhus.github.io/src/views/details/about/style.scss","/Users/sunderhus/Projects/sunderhus.github.io/src/views/header/index.ts","/Users/sunderhus/Projects/sunderhus.github.io/node_modules/lit-html/directives/unsafe-html.js","/Users/sunderhus/Projects/sunderhus.github.io/src/views/footer/index.ts","/Users/sunderhus/Projects/sunderhus.github.io/src/views/details/about/index.ts","/Users/sunderhus/Projects/sunderhus.github.io/src/utils/formatDate.ts","/Users/sunderhus/Projects/sunderhus.github.io/src/views/details/education/index.ts","/Users/sunderhus/Projects/sunderhus.github.io/src/views/details/experience/index.ts","/Users/sunderhus/Projects/sunderhus.github.io/src/views/app/index.ts","/Users/sunderhus/Projects/sunderhus.github.io/src/index.ts"],"names":["defaultTemplateProcessor","[object Object]","element","name","strings","options","prefix","parts","slice","eventContext","__webpack_require__","d","__webpack_exports__","html","directive","render","template_result","window","push","values","walkerNodeFilter","removeNodesFromTemplate","template","nodesToRemove","content","walker","document","createTreeWalker","partIndex","nextActiveIndexInTemplateParts","part","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","nextNode","node","currentNode","previousSibling","has","undefined","index","forEach","n","parentNode","removeChild","countNodes","count","nodeType","startIndex","i","length","Object","lib_template","getTemplateCacheKey","type","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","result","cacheKey","templateCache","template_factory","get","stringsArray","WeakMap","keyString","Map","set","key","join","getTemplateElement","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","createElement","style","textContent","templates","Array","from","s","removeStylesFromLitTemplates","refNode","appendChild","insertCount","walkerIndex","insertBefore","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","cloneNode","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","value","Boolean","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","super","this","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","attributes","_classProperties","v","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","Symbol","defineProperty","oldValue","_requestUpdate","configurable","enumerable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","toLowerCase","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","removeAttribute","setAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","e","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","update","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","customElement","tagName","classOrDescriptor","clazz","customElements","define","legacyCustomElement","descriptor","kind","elements","standardCustomElement","standardProperty","placement","initializer","call","assign","legacyProperty","proto","property","protoOrDescriptor","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","Error","styleSheet","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","lit_element_LitElement","lit_html","flattenStyles","flat","Infinity","arrayFlat","isArray","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","container","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","templateFactory","delete","template_instance","dom","marker","nodeMarker","boundAttributeSuffix","Template","isTemplatePartActive","createMarker","lastAttributeNameRegex","Math","random","markerRegex","RegExp","stack","lastPartIndex","hasAttributes","endsWith","stringForPart","exec","attributeLookupName","attributeValue","getAttribute","statics","split","data","indexOf","parent","lastIndex","insert","match","createTextNode","nextSibling","pop","str","suffix","createComment","__WEBPACK_AMD_DEFINE_RESULT__","hasOwn","classNames","classes","arguments","arg","argType","inner","apply","module","exports","default","isPrimitive","AttributeCommitter","NodePart","BooleanAttributePart","PropertyCommitter","EventPart","_directive_js__WEBPACK_IMPORTED_MODULE_0__","_dom_js__WEBPACK_IMPORTED_MODULE_1__","_part_js__WEBPACK_IMPORTED_MODULE_2__","_template_instance_js__WEBPACK_IMPORTED_MODULE_3__","_template_result_js__WEBPACK_IMPORTED_MODULE_4__","_template_js__WEBPACK_IMPORTED_MODULE_5__","isIterable","iterator","dirty","_createPart","AttributePart","l","text","t","_getValue","committer","commit","__pendingValue","startNode","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","instance","processor","fragment","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","setValue","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","eventName","__boundHandleEvent","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","o","noChange","nothing","isCEPolyfill","reparentNodes","removeNodes","polyfillWrapFlushCallback","start","end","before","footer","contactMe","icons","logo","icon","TemplateResult","SVGTemplateResult","_dom_js__WEBPACK_IMPORTED_MODULE_0__","_template_js__WEBPACK_IMPORTED_MODULE_1__","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","innerHTML","getHTML","svgElement","templateCaches","_template_js__WEBPACK_IMPORTED_MODULE_0__","isDirective","directives","f","args","_parts_js__WEBPACK_IMPORTED_MODULE_1__","_template_factory_js__WEBPACK_IMPORTED_MODULE_2__","appendInto","eventContent","strv","TemplateInstance","__parts","importNode","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","title","uppercase","subTitle","caption","section","about","sectionHeader","experience","education","sectionHeaderText","slide","innerSection","mainSection","baseTheme","header","list","sectionItem","avatar","_templateObject","location","href","previousValues","unsafeHTML","previousValue","footer_templateObject","favicon","mail","github","linkedin","facebook","instagram","about_templateObject","globals","cn","locals","dateFormatter","Intl","DateTimeFormat","year","month","formatDate","_len","dates","_key","literal","concat","format","education_templateObject","_templateObject2","Date","_templateObject3","experience_templateObject","experience_templateObject2","STRVLogo","experience_templateObject3","_templateObject4","_templateObject5","app_templateObject","body","classList","app"],"mappings":"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","file":"js/0.102fe.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = template.element.content;\n    insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.0');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this.__commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"_1ysb2\",\"name\":\"_3CjQP\",\"contactMe\":\"BIV_T\",\"icons\":\"_1TIM_\",\"logo\":\"_2RMk4\",\"icon\":\"_36CFI\"};","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? marker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","// extracted by mini-css-extract-plugin\nmodule.exports = {\"eventContent\":\"_10cgp\",\"strv\":\"_2h0HN\"};","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"_3H-1X\",\"uppercase\":\"_2JVT8\",\"subTitle\":\"_1moez\",\"text\":\"G0NZV\",\"caption\":\"_2C9Yl\",\"section\":\"_2zya1\",\"about\":\"_2aRmI\",\"sectionHeader\":\"_-1jfj\",\"experience\":\"_1ZrFv\",\"education\":\"_2FZXl\",\"sectionHeaderText\":\"BCPLa\",\"slide\":\"_2fo6P\",\"innerSection\":\"_14ZIM\",\"event\":\"_34Mvx\",\"mainSection\":\"_18zjR\",\"baseTheme\":\"_35fk8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"_3NWuO\"};","module.exports = __webpack_public_path__ + \"images/32e8c.png\";","module.exports = \"<svg viewBox=\\\"0 0 100 100\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"100\\\" height=\\\"100\\\" id=\\\"background\\\" stroke-width=\\\"5\\\" stroke=\\\"currentColor\\\" fill=\\\"none\\\"></rect><text x=\\\"95\\\" y=\\\"90\\\" id=\\\"text\\\" font-size=\\\"50\\\" text-anchor=\\\"end\\\" font-weight=\\\"bold\\\" fill=\\\"currentColor\\\" font-family=\\\"NeutraText-Bold, Neutra Text\\\">BS</text></svg>\"","module.exports = \"<svg id=\\\"instagram\\\" aria-hidden=\\\"true\\\" role=\\\"img\\\" viewBox=\\\"0 0 448 512\\\"><path fill=\\\"currentColor\\\" d=\\\"M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z\\\"></path></svg>\"","module.exports = \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 448 512\\\"><path fill=\\\"currentColor\\\" d=\\\"M400 32H48A48 48 0 0 0 0 80v352a48 48 0 0 0 48 48h137.25V327.69h-63V256h63v-54.64c0-62.15 37-96.48 93.67-96.48 27.14 0 55.52 4.84 55.52 4.84v61h-31.27c-30.81 0-40.42 19.12-40.42 38.73V256h68.78l-11 71.69h-57.78V480H400a48 48 0 0 0 48-48V80a48 48 0 0 0-48-48z\\\"></path></svg>\"","module.exports = \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 448 512\\\"><path fill=\\\"currentColor\\\" d=\\\"M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z\\\"></path></svg>\"","module.exports = \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 496 512\\\"><path fill=\\\"currentColor\\\" d=\\\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\\\"></path></svg>\"","module.exports = \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" data-prefix=\\\"fas\\\" data-icon=\\\"envelope\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 512 512\\\"><path fill=\\\"currentColor\\\" d=\\\"M502.3 190.8c3.9-3.1 9.7-.2 9.7 4.7V400c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V195.6c0-5 5.7-7.8 9.7-4.7 22.4 17.4 52.1 39.5 154.1 113.6 21.1 15.4 56.7 47.8 92.2 47.6 35.7.3 72-32.8 92.3-47.6 102-74.1 131.6-96.3 154-113.7zM256 320c23.2.4 56.6-29.2 73.4-41.4 132.7-96.3 142.8-104.7 173.4-128.7 5.8-4.5 9.2-11.5 9.2-18.9v-19c0-26.5-21.5-48-48-48H48C21.5 64 0 85.5 0 112v19c0 7.4 3.4 14.3 9.2 18.9 30.6 23.9 40.7 32.4 173.4 128.7 16.8 12.2 50.2 41.8 73.4 41.4z\\\"></path></svg>\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"_3rwVB\",\"sectionItem\":\"_3vjBP\",\"avatar\":\"_3MbjJ\"};","import {html} from 'lit-html'\nimport style from './style.scss'\n\nexport default html`\n  <header id=\"header\" class=${style.header}>\n    <a href=${location.href}>\n      <h1>BSunderhus</h1>\n    </a>\n  </header>\n`\n\nexport {style}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive, NodePart } from '../lit-html.js';\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap();\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('unsafeHTML can only be used in text bindings');\n    }\n    const previousValue = previousValues.get(part);\n    if (previousValue !== undefined && isPrimitive(value) &&\n        value === previousValue.value && part.value === previousValue.fragment) {\n        return;\n    }\n    const template = document.createElement('template');\n    template.innerHTML = value; // innerHTML casts to string internally\n    const fragment = document.importNode(template.content, true);\n    part.setValue(fragment);\n    previousValues.set(part, { value, fragment });\n});\n//# sourceMappingURL=unsafe-html.js.map","import {html} from 'lit-html'\nimport {unsafeHTML} from 'lit-html/directives/unsafe-html'\n\nimport style from './style.scss'\n\nimport favicon from '~/svg/favicon.svg'\nimport instagram from '~/svg/instagram.svg'\nimport facebook from '~/svg/facebook.svg'\nimport linkedin from '~/svg/linkedin.svg'\nimport github from '~/svg/github.svg'\nimport mail from '~/svg/envelope-solid.svg'\n// import Whatsapp from '~/svg/whatsapp-brands.svg'\n\nexport default html`\n  <footer id=\"footer\" class=${style.footer}>\n    <div class=${style.logo}>\n      ${unsafeHTML(favicon)}\n    </div>\n    <h3 class=${style.name}>\n      <i>Bernardo Sunderhus</i>\n    </h3>\n    <!-- <p class=${style.contactMe}>Feel free to contact me</p> -->\n    <div class=${style.icons}>\n      <a class=${style.icon} aria-label=\"E-mail link\" target=\"__blank\" href=\"mailto:bernardo.sunderhus@gmail.com\">\n        ${unsafeHTML(mail)}\n      </a>\n      <!-- <a target=\"__blank\" href=\"https://wa.me/5527992844701\">\n        <Whatsapp class=${style.icon}/>\n      </a> -->\n      <a class=${style.icon} aria-label=\"Github link\" target=\"__blank\" href=\"https://github.com/bsunderhus\">\n        ${unsafeHTML(github)}\n      </a>\n      <a class=${style.icon} aria-label=\"Linkedin link\" target=\"__blank\" href=\"https://www.linkedin.com/in/bsunderhus\">\n        ${unsafeHTML(linkedin)}\n      </a>\n      <a class=${style.icon} aria-label=\"Facebook icon\" target=\"__blank\" href=\"https://www.facebook.com/bsunderhus\">\n        ${unsafeHTML(facebook)}\n      </a>\n      <a class=${style.icon} aria-label=\"Instagram icon\" target=\"__blank\" href=\"https://www.instagram.com/bsunderhus/\">\n        ${unsafeHTML(instagram)}\n      </a>\n    </div>\n  </footer>\n`\n\nexport {style}\n","import '~/web-components/port-details'\n\nimport {html} from 'lit-html'\nimport {style as globals} from '~/views/app'\nimport locals from './style.scss'\nimport cn from 'classnames'\n\n\nexport default html`\n  <port-details class=${globals.section} id=${globals.about} open sticky>\n    <header class=${cn(globals.sectionHeader)} slot=\"summary\">\n      <h2 class=${cn(globals.uppercase, globals.sectionHeaderText)}>\n        About me\n      </h2>\n    </header>\n    <section class=${cn(globals.innerSection)} id=\"about\">\n      <div class=${cn(locals.avatar)}></div>\n      <!-- <img src={avatarURL} class={cn(locals.avatar)} alt=\"My perfil photo\"/> -->\n      <p>\n        Hi I'm Bernardo, I'm a Brazilian who is passionate about working with innovations.\n      </p>\n      <p>\n        As web development is currently in the midst of a big storm of changes I see myself as a constant student, always interested and dedicated to keep up (and also improve).\n      </p>\n      <p>\n        I love to spend time with my family, to travel and to go to the movies and I simply can't live without a decent headphone!\n      </p>\n    </section>\n  </port-details>\n`\n","\nconst dateFormatter = new Intl.DateTimeFormat('default', {\n  year: '2-digit',\n  month: '2-digit'\n})\n\nexport default (template: TemplateStringsArray, ...dates: Date[]) => template.map((literal, index) => (\n  index < dates.length\n    ? `${literal}${dateFormatter.format(dates[index])}`\n    : literal\n)).join('')\n","import '~/web-components/port-details'\nimport '~/web-components/port-event'\nimport '~/web-components/highlight-text'\n\nimport {html} from 'lit-html'\nimport cn from 'classnames'\nimport {style as globals} from '~/views/app'\nimport formatDate from '~/utils/formatDate'\n\n\nexport default html`\n  <port-details class=${globals.section} id=${globals.education} sticky>\n    <div class=${globals.sectionHeader} slot=\"summary\">\n      <h2 class=${cn(globals.uppercase, globals.sectionHeaderText)}>\n        Education\n      </h2>\n    </div>\n    <section class=${globals.innerSection}>\n      <port-event class=${globals.event}>\n        <h3 slot=\"title\">\n          Bachelor of Computer Science\n        </h3>\n        <a rel=\"noopener\" class=${globals.caption} target=\"_blank\" href=\"http://www.ufes.br\" slot=\"location\">\n          <abbr title=\"Universidade Federal do Espirito Santo\">UFES</abbr>\n        </a>\n        <highlight-text\n          class=${globals.caption}\n          slot=\"timestamp\"\n          text=${formatDate`< ${new Date(2012, 0)} - ${new Date(2018, 6)} >`}\n        ></highlight-text>\n        <p>\n          Research on structural supporting the development of Situation-awareness applications based on Context-awareness concepts. Motivated by the increasing number of data to support the development of applications that are more sensible to an user.\n        </p>\n      </port-event>\n      <port-event class=${globals.event}>\n        <h3 slot=\"title\">\n          Meaningful Data and Automation\n        </h3>\n        <a rel=\"noopener\" target=\"_blank\" href=\"https://www.hanze.nl\" class=${cn(globals.caption)} slot=\"location\">\n          Hanze\n        </a>\n        <highlight-text\n          class=${globals.caption}\n          slot=\"timestamp\"\n          text=${formatDate`< ${new Date(2015, 0)} - ${new Date(2016, 0)} >`}\n        ></highlight-text>\n        <p>\n          One year exchange experience on Netherlands sponsored by the Brazilian government with the program <abbr title=\"Brazil Netherlands Technology\">BRANETEC</abbr>.\n        </p>\n        <p>\n          I've learned a lot about automation and the utilization of big data in the sense of sensors and embedded systems.\n        </p>\n      </port-event>\n    </section>\n  </port-details>\n`\n","import '~/web-components/port-details'\nimport '~/web-components/port-event'\nimport '~/web-components/highlight-text'\nimport '~/web-components/port-list'\n\nimport cn from 'classnames'\nimport {style as globals} from '~/views/app'\nimport locals from './style.scss'\nimport STRVLogo from '~/images/STRV.png'\nimport formatDate from '~/utils/formatDate';\nimport { html } from 'lit-html';\n\nexport default html`\n  <port-details class=${globals.section} id=${globals.experience} sticky>\n    <div class=${globals.sectionHeader} slot=\"summary\">\n      <h2 class=${cn(globals.uppercase, globals.sectionHeaderText)}>\n        Experience\n      </h2>\n    </div>\n    <section class=${cn(globals.innerSection)}>\n      <port-event class=${globals.event}>\n        <h3 slot=\"title\">\n          Front-end Web Engineer\n        </h3>\n        <a rel=\"noopener\" href=\"https://www.strv.com/\" target=\"__blank\" class=${globals.caption} slot=\"location\">\n          STRV\n        </a>\n        <highlight-text\n          class=${cn(globals.caption)}\n          slot=\"timestamp\"\n          text=${formatDate`< ${new Date(2018, 9)} - ${new Date()} >`}\n        ></highlight-text>\n        <div>\n          <div class=${locals.eventContent}>\n            <img\n              class=${locals.strv}\n              src=${STRVLogo}\n              srcset=${STRVLogo}\n            />\n            <p>\n              I'm currently working on <span class=${cn(globals.caption)}>STRV</span> as an Front-End Web Engineer. \n            </p>\n            <p>\n              Whether you are fortune 500 or a startup <span class=${cn(globals.caption)}>STRV</span> can help you to unlock opportunity by creating human-centered products.\n            </p>\n            <p>\n              Some of <span class=${cn(globals.caption)}>STRV</span> collaborations have been featured on TechCrunch, Mashable or Wired; incubated in top US accelerators, or crowd-funded via Kickstarter.\n            </p>\n          </div>\n          <port-list class=${locals.eventContent}>\n            <port-list-item class=${globals.text}>\n              React-Native Application development for clients across the world!\n            </port-list-item>\n            <port-list-item class=${globals.text}>\n              Web based internal applications development with liberty to develop the best\n            </port-list-item>\n          </port-list>\n        </div>\n      </port-event>\n      <port-event class=${globals.event}>\n        <h3 slot=\"title\">\n          Lead Front-end Web Engineer\n        </h3>\n        <span class=${globals.caption} slot=\"location\">\n          Evológica\n        </span>\n        <highlight-text\n          class=${cn(globals.caption)}\n          slot=\"timestamp\"\n          text=${formatDate`< ${new Date(2016, 0)} - ${new Date(2018, 9)} >`}\n        ></highlight-text>\n        <div class=${locals.eventContent}>\n          <p>\n            Evológica is a company with expertise in the modeling, development, and support of Insurance Systems. My activities at Evológica involves:\n          </p>\n        </div>\n        <port-list class=${locals.eventContent}>\n          <port-list-item class=${globals.text}>\n            Development of tools to improve communication between Curio (Evologica’s internal framework) and web applications.\n          </port-list-item>\n          <port-list-item class=${globals.text}>\n            Mentor Front-End web development to other colleagues. With side projects to learn from HTML5, CSS and Javascript to Typescript, React, Redux, MobX, RxJS, Unstated and React’s Context <abbr title=\"Application Programming Interface\">API</abbr>.\n          </port-list-item>\n          <port-list-item class=${globals.text}>\n            Maintain and create robust and complete environment (production and development ready), to ensure that most developers don’t have to worry about this.\n          </port-list-item>\n          <port-list-item class=${globals.text}>\n            As the only full time front-end of the company I was also charged with decisions in technologies and strategies for both the development of applications and the progress of the team as a whole.\n          </port-list-item>\n        </port-list>\n      </port-event>\n      <port-event class=${globals.event}>\n        <h3 slot=\"title\">\n          Front-end Web Engineer\n        </h3>\n        <p class=${globals.caption} slot=\"location\">\n          Multicast\n        </p>\n        <highlight-text\n          class=${cn(globals.caption)}\n          slot=\"timestamp\"\n          text=${formatDate`< ${new Date(2017, 5)} - ${new Date(2018, 11)} >`}\n        ></highlight-text>\n        <p class=${cn(globals.text, locals.eventContent)}>\n          Multicast is a young <abbr title=\"Internet of Things\">IoT</abbr> company who provides an end-to-end solution for monitoring products, equipment, supplies, environments, etc,. My roles were:\n        </p>\n        <port-list class=${locals.eventContent}>\n          <port-list-item class=${globals.text}>\n            Develop the <abbr title=\"Progressive Web Application\">PWA</abbr> that both user and administrator have access to interact with. Being this application robust, offline-first, mobile-first and available in all platforms (for <abbr>IOS</abbr> I had to introduce Phonegap to the project)\n          </port-list-item>\n          <port-list-item class=${globals.text}>\n            Manage the environment used for production and development, ensuring the lightest possible application with tree shaking, code splitting and multiple modules entry points, with the help of Webpack\n          </port-list-item>\n        </port-list>\n      </port-event>\n      <port-event class=${globals.event}>\n        <h3 slot=\"title\">\n          Fullstack Web Developer\n        </h3>\n        <a rel=\"noopener\" href=\"https://www.resultate.com.br/\" target=\"__blank\" class=${cn(globals.caption)} slot=\"location\">\n          Resultate\n        </a>\n        <highlight-text\n          class=${cn(globals.caption)}\n          slot=\"timestamp\"\n          text=${formatDate`< ${new Date(2016, 2)} - ${new Date(2016, 6)} >`}\n        ></highlight-text>\n        <port-list class=${locals.eventContent}>\n          <port-list-item class=${globals.text}>\n            Worked with Wordpress to fast deliver applications\n          </port-list-item>\n          <port-list-item class=${globals.text}>\n            Learned Laravel and other <abbr title=\"Hypertext Preprocessor\">PHP</abbr> technologies that ensured me a good remote environment\n          </port-list-item>\n        </port-list>\n      </port-event>\n    </section>\n  </port-details>\n`\n","import {html} from 'lit-html'\nimport style from './style.scss'\nimport variables from './style.json'\n\nimport header from '~/views/header'\nimport footer from '~/views/footer'\nimport {about, education, experience} from '~/views/details'\n\nexport default html`\n  ${header}\n  <main class=${style.mainSection}>\n    ${about}\n    ${experience}\n    ${education}\n  </main>\n  ${footer}\n`\n\nexport {style, variables}\n","import {render} from 'lit-html'\nimport app, {style} from '~/views/app'\n\n\ndocument.body.classList.add(style.baseTheme)\nrender(app, document.body)\n"],"sourceRoot":""}